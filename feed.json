{
    "version": "https://jsonfeed.org/version/1",
    "title": "Captain Embedded üë®üèª‚Äç‚úàÔ∏è‚öì",
    "description": "",
    "home_page_url": "https://rosmianto.com",
    "feed_url": "https://rosmianto.com/feed.json",
    "user_comment": "",
    "author": {
        "name": "Rosmianto A. Saputro"
    },
    "items": [
        {
            "id": "https://rosmianto.com/2-rule-method-for-experimental-projects.html",
            "url": "https://rosmianto.com/2-rule-method-for-experimental-projects.html",
            "title": "2-Rule Method for Experimental Projects",
            "summary": "The simplest way to 10x your embedded learning speed: Tons of experimental projects ‚Äî here‚Äôs why: Now let's delve into each one. Yes this is an important thing when learning. Learning in isolation means you learn¬†one thing at a time. Building full-scale embedded projects, while&hellip;",
            "content_html": "<p>The simplest way to 10x your embedded learning speed:</p>\n<p>Tons of experimental projects ‚Äî here‚Äôs why:</p>\n<ul>\n<li>Experimental projects will help you learn in isolation (an important concept)</li>\n<li>They will act as training wheels</li>\n<li>They can be reused as future project‚Äôs template</li>\n</ul>\n<p>Now let's delve into each one.</p>\n<h1>They will help you learn in isolation</h1>\n<p>Yes this is an important thing when learning. Learning in isolation means you learn¬†<em>one thing at a time</em>.</p>\n<p>Building full-scale embedded projects, while it's also good, will expose you to too many things at once. Let's say you learn embedded by exploring Smartwatch firmware source code, you will have to learn heartbeat sensor code, timekeeping code, display code (very complex), code for Bluetooth LE, and tons of other moving parts. All at once.</p>\n<p>That sounds overwhelming.</p>\n<p>It's better to build a project for each concept you want to learn. For example:</p>\n<ul>\n<li>A project containing how to drive an OLED display</li>\n<li>A project about how to broadcast Bluetooth LE advertisement payload</li>\n<li>Another project for heartbeat sensor to understand heart <span class=\"ILfuVd\" lang=\"en\"><span class=\"hgKElc\">arrhythmia</span></span> (I don't even know what that is lol)</li>\n</ul>\n<p>In summary, learning in isolation will help your brain manage stress and deliberately practice one thing in one project.</p>\n<h1>They will act as training wheels</h1>\n<p>The funny thing about experimental projects is that, you will soon feel more confident to learn the next thing.</p>\n<p>For example, once you've experimented with BLE, next time you need to add BLE will feel effortless and smooth like butter.</p>\n<p>Somehow now you know BLE GATT, GAP, various generic profiles, how to config advertisements, etc. This time you work faster, and better. You know the common errors that could show up, plus how to solve them. Weird, but now BLE felt natural for you.</p>\n<p>Switch to another project, and you will learn much faster.</p>\n<p>Actually, to your surprise, this is backed up by science. Just look at the drawing I made below:</p>\n<figure class=\"post__image post__image--center\"><img loading=\"lazy\"  src=\"https://rosmianto.com/media/posts/15/learning-loop-2.jpeg\" alt=\"\" width=\"400\" height=\"409\" sizes=\"100vw\" srcset=\"https://rosmianto.com/media/posts/15/responsive/learning-loop-2-xs.jpeg 300w ,https://rosmianto.com/media/posts/15/responsive/learning-loop-2-sm.jpeg 480w ,https://rosmianto.com/media/posts/15/responsive/learning-loop-2-md.jpeg 768w ,https://rosmianto.com/media/posts/15/responsive/learning-loop-2-lg.jpeg 1024w ,https://rosmianto.com/media/posts/15/responsive/learning-loop-2-xl.jpeg 1360w ,https://rosmianto.com/media/posts/15/responsive/learning-loop-2-2xl.jpeg 1600w\"></figure>\n<p>Apparently, learning embedded systems is all psychological.</p>\n<h1>They can be reused as future project‚Äôs template</h1>\n<p>Lastly, this is probably the best way to reuse your learning folders: by making them as templates.</p>\n<p>That way, you don't even need to worry about various configurations, you just copy and paste. And voila! You have added a new feature.</p>\n<p>For example, in your BLE project before, you already made a BLE profile for Heart rate sensor, next time you need BLE with a heart rate sensor, you could just pull the folder and clone it. It will probably take 5 minutes (instead of redoing the same shit for 45 minutes, big win!).</p>\n<h1>The 2-Rule Method</h1>\n<p>All the above sounds easy, but to make it effective, there are lots of nuances to understand before you do it.</p>\n<p>I created a 4-Rule Method to help you create experimental projects far more effectively.</p>\n<h2>Rule #1: Aim for 100 Side Projects</h2>\n<p>Part of being an excellent embedded engineer is just mere exposure. Create at least 100 side projects for 100 concepts you want to learn.</p>\n<p>Yes, it seems daunting at first. But 100 projects are actually achievable if you learn lots of things.</p>\n<p>Create a new project to learn how to interface a sensor with I2C.</p>\n<p>Create a new project to convert analog signal into digital signal using ADC.</p>\n<p>Create projects for different microcontrollers.</p>\n<p>Make sure you understand each project, each line, and each configuration. Don't just blindly copy-paste code online because it will defeat the purpose of experimentation.</p>\n<p>Look at my experiment folder:</p>\n<figure ><figure class=\"post__image post__image--center\"><img loading=\"lazy\"  src=\"https://rosmianto.com/media/posts/15/100projects.jpeg\" alt=\"\" width=\"700\" height=\"437\" sizes=\"100vw\" srcset=\"https://rosmianto.com/media/posts/15/responsive/100projects-xs.jpeg 300w ,https://rosmianto.com/media/posts/15/responsive/100projects-sm.jpeg 480w ,https://rosmianto.com/media/posts/15/responsive/100projects-md.jpeg 768w ,https://rosmianto.com/media/posts/15/responsive/100projects-lg.jpeg 1024w ,https://rosmianto.com/media/posts/15/responsive/100projects-xl.jpeg 1360w ,https://rosmianto.com/media/posts/15/responsive/100projects-2xl.jpeg 1600w\"></figure>\n<figcaption >Different MCU. Different sensor. Different projects. I'm more freestyle.</figcaption>\n</figure>\n<p>I have plenty of reusable projects in my stash.</p>\n<h2>Rule #2: Ditch best practices</h2>\n<p>Except you are experimenting with best practices, please ditch best practices, for now. The goal is to exposure to lots of things, including bad, stupid, dumb practices. You don't learn just from good things, but also from bad things.</p>\n<p>Should you host the project on GitHub? Up to you.</p>\n<p>Should you use Arduino or mbed? I don't know.</p>\n<p>Even better, keep breaking rules in embedded systems to see how far you can abuse the project. Pick bad variable name, create 10000 lines main.cpp, try to overflow buffer. What happens if you don't draw diagram first.</p>\n<p>You will learn something. And you will learn why such things are considered bad in the first place.</p>\n<p class=\"msg msg--warning\">Ditch the rules in experimental mode. But use all the best practices you know <strong>at work</strong>.</p>\n<h2>Bonus Rule: Prioritize Quantity over Quality</h2>\n<p>Yes, you read it right.</p>\n<p>You should prioritize quantity over quality. Because quality work comes from lots of repetition. How do you think Tiger Woods perfected his swings?</p>\n<p>Don't be too afraid of low-quality side projects, nobody will see them anyway.</p>\n<p>Trust me, the quality will follow later. Focus on quantity first. Let me remind you of this quote:</p>\n<blockquote>\n<p>90% of everything is crap</p>\n<p>Sturgeon's law</p>\n</blockquote>\n<p><!-- notionvc: 9aa7c0ef-d8e0-4b26-bec4-22b9b4d2972b --></p>",
            "image": "https://rosmianto.com/media/posts/15/100projects-2.jpeg",
            "author": {
                "name": "Rosmianto A. Saputro"
            },
            "tags": [
                   "Embedded Productivity"
            ],
            "date_published": "2024-03-20T09:03:48+07:00",
            "date_modified": "2024-03-20T16:07:42+07:00"
        },
        {
            "id": "https://rosmianto.com/3d-method-for-confident-firmware.html",
            "url": "https://rosmianto.com/3d-method-for-confident-firmware.html",
            "title": "3D Method for Confident Firmware",
            "summary": "Sometimes you just feel that your firmware isn't robust enough, isn't reliable enough. What if my firmware isn't handling edge cases very well? First of all, I admire your concerns, because if you really think that way, that means you have a high standard when&hellip;",
            "content_html": "<p>Sometimes you just feel that your firmware isn't robust enough, isn't reliable enough. What if my firmware isn't handling edge cases very well?</p>\n<p>First of all, I admire your concerns, because if you really think that way, that means you have a high standard when it comes to firmware development, really.</p>\n<p>Because the majority of embedded engineers aren't even aware that their firmware should be robust and reliable. For them, as long as the firmware isn't crashing after 5 minutes of running, it's good and they move on to implement the next cool things.</p>\n<p>That's very wrong on so many levels.</p>\n<p>The firmware should be well-tested and you should understand every line of code you've written. The firmware should meet the requirements, and pass the performance threshold. For me, such firmware is called <em><strong>confident firmware</strong></em>.</p>\n<p>You can be reasonably confident that your work is good enough to survive common scenarios and some special edge cases. Make no mistake, because confident firmware isn't equal to bug-free firmware. But whenever the firmware has bugs, you can <a href=\"https://rosmianto.com/git-backtracking-debugging-technique.html\" target=\"_blank\" rel=\"noopener noreferrer\">confidently pinpoint</a> the root cause and immediately fix the issue.</p>\n<p>The unsure feeling you have can be eliminated (or at least reduced) when you know everything about the firmware you develop, this is including:</p>\n<ol>\n<li>how each module interacts with the others</li>\n<li>how each module has been tested</li>\n<li>how each module is written</li>\n</ol>\n<p>That's why I call my method as <strong>3D Method: Draw, Dissect, Detect</strong>.</p>\n<h1>3D: Draw, Dissect, Detect</h1>\n<p>Now, let's delve into each step:</p>\n<h2>Draw</h2>\n<p>Every great software should have at least one diagram to explain the interaction between modules.</p>\n<p>Humans, by nature, cannot comprehend chaos and complexity. That's why we invented maps to navigate the road, that's why we created organizational diagrams to show who is responsible for what.</p>\n<p>In other words, we create abstraction to help ourselves manage chaos and complexity.</p>\n<p>When it comes to firmware development, that means we draw firmware architecture diagrams, program flow diagrams, and hardware design diagrams. In my <a href=\"https://fwguide.rosmianto.com/\" target=\"_blank\" rel=\"noopener noreferrer\">paid firmware development guide</a>, I explain more deeply how you can draw diagram for your embedded project. Here's an example of a firmware architecture diagram I've drawn for the guide:</p>\n<figure ><figure class=\"post__image post__image--center\"><img loading=\"lazy\"  src=\"https://rosmianto.com/media/posts/13/fwguide.webp\" alt=\"\" width=\"700\" height=\"570\" sizes=\"100vw\" srcset=\"https://rosmianto.com/media/posts/13/responsive/fwguide-xs.webp 300w ,https://rosmianto.com/media/posts/13/responsive/fwguide-sm.webp 480w ,https://rosmianto.com/media/posts/13/responsive/fwguide-md.webp 768w ,https://rosmianto.com/media/posts/13/responsive/fwguide-lg.webp 1024w ,https://rosmianto.com/media/posts/13/responsive/fwguide-xl.webp 1360w ,https://rosmianto.com/media/posts/13/responsive/fwguide-2xl.webp 1600w\"></figure>\n<figcaption >Architecture diagram will help you navigate your firmware complexity (fwguide.rosmianto.com)</figcaption>\n</figure>\n<p>If you mastered the Draw step, you will be far more confident in your firmware design. You know which parts will do A, which part will do B, etc. Even if your project has bugs, you will immediately know where to look.</p>\n<h2>Dissect</h2>\n<p>Dissecting your code, or reviewing your code, is a sure way to make sure the firmware will work as intended. Sometimes you can do it alone, or you can ask your senior or even junior engineers to help dissect/review your code. Because as Linus Torvalds said:</p>\n<blockquote>\n<p>given enough eyeballs, all bugs are shallow</p>\n<p>Linus's Law</p>\n</blockquote>\n<p>Yes, the more reviews, the more bugs can be discovered earlier.</p>\n<p>If you think reviewing code is a tedious process, you are right, but you are also a bit wrong. Because I didn't say only humans can review your code. Sometimes robots (aka software) can help you catch silly mistakes here and there.</p>\n<p>A good example of this robot is <a href=\"https://clang-analyzer.llvm.org/\" target=\"_blank\" rel=\"noopener noreferrer\">static analyzer</a>. It's software that scans your entire firmware code to find some potential issues, sometimes it spits false-positive issues, but often it catches serious mistakes (like vulnerabilities or semantical errors).</p>\n<p>So, use both humans and robots to maximize <span style=\"text-decoration: line-through;\">profit</span> confidence.</p>\n<h2>Detect</h2>\n<p>Detect problems by testing your firmware code.</p>\n<p>This can be achieved by writing unit tests, where you test each module with a set of inputs and expect certain outputs.</p>\n<p>Testing can be automated. In fact, code testing should be automated. You can achieve this by using automation tools like GitHub Actions, so whenever you push changes to GitHub, it will automatically rerun the tests you've written, and report the result.</p>\n<p>I recommend you to use <a href=\"https://github.com/catchorg/Catch2\" target=\"_blank\" rel=\"noopener noreferrer\">Catch2</a>, because it is simple enough and easy enough to get started. Combine it with CMake and GitHub Actions, your life will be far easier. I cover this much deeper in my <a href=\"https://fwguide.rosmianto.com/\" target=\"_blank\" rel=\"noopener noreferrer\">paid firmware guide</a>, I also give you a demo to setup GitHub Actions.</p>\n<h1>Summary</h1>\n<p>That's all to know. To make yourself more confident in your firmware, implement my 3D Method above and you will finally sleep better tonight.</p>\n<p>Just remember that confidence doesn't guarantee bug-free, you still need to check and hunt for bugs. But at least, when you are confident, you can locate the issues much faster.</p>",
            "image": "https://rosmianto.com/media/posts/13/fwguide-2.webp",
            "author": {
                "name": "Rosmianto A. Saputro"
            },
            "tags": [
                   "Embedded Productivity"
            ],
            "date_published": "2024-03-18T21:45:25+07:00",
            "date_modified": "2024-03-19T13:14:02+07:00"
        },
        {
            "id": "https://rosmianto.com/git-backtracking-debugging-technique.html",
            "url": "https://rosmianto.com/git-backtracking-debugging-technique.html",
            "title": "Git Backtracking Debugging Technique",
            "summary": "There are 2 great pieces of advice when you're doing firmware development: Commits are free so you should use them whenever possible. It will make your life easy when it comes to tracking code changes. Because in the entire firmware development, you will make hundreds&hellip;",
            "content_html": "<p>There are 2 great pieces of advice when you're doing firmware development:</p>\n<ol>\n<li>Use Git and GitHub</li>\n<li>Make commits as small as practically possible</li>\n</ol>\n<p>Commits are free so you should use them whenever possible. It will make your life easy when it comes to tracking code changes.</p>\n<h1>Why Should I Track My Code?</h1>\n<p>Because in the entire firmware development, you will make hundreds if not thousands changes to the code. You will be introducing new features, testing out a new architecture, refactoring some code smells here and there, paying technical debts, and hundreds of other things you might do to the code.</p>\n<p>But because we're human, we can make errors.</p>\n<p>From minor typos, to revenue-affecting critical bugs. At some points in our embedded career, we will make mistakes, even senior engineers still can make mistakes. And we often backup our work to prevent something wrong happen. We want to make sure we can restore chaos when something terrible happens. In other words, we backup as an assurance.</p>\n<p>Code tracking is a form of backup.</p>\n<p>It offers an unlimited and easy way to backup every step we make. And this article will explain to you how to effectively use git to help your debugging activity.</p>\n<p class=\"msg msg--info\">On April 6th 2021, a university researcher submitted a patch to Linux kernel maintainers. The maintainers accepted the patch and merged it to the kernel code.<br><br><a href=\"https://www.theverge.com/2021/4/30/22410164/linux-kernel-university-of-minnesota-banned-open-source\" target=\"_blank\" rel=\"noopener noreferrer\">It turned out that the researcher has injected malicious code into the patch as a study for his university research</a>. Treating Linux kernel community as his lab guinea pig.<br><br>Maintainers were not happy with this and instantly ripped out his code from the kernel.<br><br>Without using code tracking (in this case, git), the maintainers will have a tedious day checking one by one the malicious code, and deleting them line by line.<br><br>Another example of using git will make your life easier in many situations.<br><br>The researcher and the entire university have been banned from submitting future patches. Very sad.</p>\n<h1>How to Pinpoint The Bug with Git</h1>\n<p>Let's say you have a project with commits like this:</p>\n<figure ><figure class=\"post__image post__image--center\"><img loading=\"lazy\"  src=\"https://rosmianto.com/media/posts/12/git-history-2.png\" alt=\"\" width=\"500\" height=\"205\" sizes=\"100vw\" srcset=\"https://rosmianto.com/media/posts/12/responsive/git-history-2-xs.png 300w ,https://rosmianto.com/media/posts/12/responsive/git-history-2-sm.png 480w ,https://rosmianto.com/media/posts/12/responsive/git-history-2-md.png 768w ,https://rosmianto.com/media/posts/12/responsive/git-history-2-lg.png 1024w ,https://rosmianto.com/media/posts/12/responsive/git-history-2-xl.png 1360w ,https://rosmianto.com/media/posts/12/responsive/git-history-2-2xl.png 1600w\"></figure>\n<figcaption >Each circle represents your commit. You have 5 days' worth of commits</figcaption>\n</figure>\n<p>On April 5, you make a commit and test the code. Suddenly, a wild bug appears and makes the whole system crash. You reset the device, still crashes.</p>\n<p>You're confused because you just added a minor feature. It shouldn't crash.</p>\n<p>In this situation, you decided to revert back to commit Apr 4:</p>\n<p><code>git checkout commit-apr4-hash</code></p>\n<p>You rebuild the project and pufff, the bug is gone!</p>\n<p>At this point, you can reasonably assume that commit-apr5 is causing the problem.</p>\n<h1>Find the Root Cause</h1>\n<p>Use git diff to find code changes that caused the issue:</p>\n<p><code>git diff commit-apr5-hash commit-apr4-hash</code></p>\n<p>You might find some silly like <a href=\"https://en.wikipedia.org/wiki/Off-by-one_error\" target=\"_blank\" rel=\"noopener noreferrer\">off-by-one errors</a>, <a href=\"https://encyclopedia.kaspersky.com/glossary/use-after-free/\" target=\"_blank\" rel=\"noopener noreferrer\">use-after-free errors.</a> Or maybe you will find something more serious like a race condition, deadlock, and starving tasks. Now it's your job to figure out how to solve it.</p>\n<p>You might ask, what if the git diff result is too big, like 1000 lines too big?</p>\n<p>Well, glad you asked. That's why in the first paragraph I said to make git commits as small as humanly possible. This will prevent your git diff become a mammoth.</p>\n<p>What if you already made a big diff? Well, good luck finding the root cause haha üòÅ¬†</p>\n<h1>Update: A Small Example</h1>\n<p>You won't believe it. I wrote this article on Apr 18th, 2024. And one day after publishing the article, I faced a bug which I solved using this technique. I guess I have to walk the talk. Let's go.</p>\n<p>I was working on my employer's firmware code. I have this commit history:</p>\n<figure ><figure class=\"post__image post__image--center\"><img loading=\"lazy\"  src=\"https://rosmianto.com/media/posts/12/Screenshot-from-2024-03-19-09-32-05.png\" alt=\"\" width=\"700\" height=\"106\" sizes=\"100vw\" srcset=\"https://rosmianto.com/media/posts/12/responsive/Screenshot-from-2024-03-19-09-32-05-xs.png 300w ,https://rosmianto.com/media/posts/12/responsive/Screenshot-from-2024-03-19-09-32-05-sm.png 480w ,https://rosmianto.com/media/posts/12/responsive/Screenshot-from-2024-03-19-09-32-05-md.png 768w ,https://rosmianto.com/media/posts/12/responsive/Screenshot-from-2024-03-19-09-32-05-lg.png 1024w ,https://rosmianto.com/media/posts/12/responsive/Screenshot-from-2024-03-19-09-32-05-xl.png 1360w ,https://rosmianto.com/media/posts/12/responsive/Screenshot-from-2024-03-19-09-32-05-2xl.png 1600w\"></figure>\n<figcaption >4 commits in a morning. Make sure to keep them small</figcaption>\n</figure>\n<p>The problem is, in the latest commit the firmware is crashing without a clear explanation (Add WiFi button):</p>\n<figure ><figure class=\"post__image post__image--center\"><img loading=\"lazy\"  src=\"https://rosmianto.com/media/posts/12/Screenshot-from-2024-03-19-09-36-40.png\" alt=\"\" width=\"804\" height=\"576\" sizes=\"100vw\" srcset=\"https://rosmianto.com/media/posts/12/responsive/Screenshot-from-2024-03-19-09-36-40-xs.png 300w ,https://rosmianto.com/media/posts/12/responsive/Screenshot-from-2024-03-19-09-36-40-sm.png 480w ,https://rosmianto.com/media/posts/12/responsive/Screenshot-from-2024-03-19-09-36-40-md.png 768w ,https://rosmianto.com/media/posts/12/responsive/Screenshot-from-2024-03-19-09-36-40-lg.png 1024w ,https://rosmianto.com/media/posts/12/responsive/Screenshot-from-2024-03-19-09-36-40-xl.png 1360w ,https://rosmianto.com/media/posts/12/responsive/Screenshot-from-2024-03-19-09-36-40-2xl.png 1600w\"></figure>\n<figcaption >I use ESP32 and this is the system crash log</figcaption>\n</figure>\n<p>I applied the backtracking debugging technique by reverting back the commits one by one. Suddenly the bug vanished in the commit hash <code>10dfaaea</code>.</p>\n<p>Checking the diff, I only touched a small part of the files. Nothing weird:</p>\n<figure ><figure class=\"post__image post__image--center\"><img loading=\"lazy\"  src=\"https://rosmianto.com/media/posts/12/Screenshot-from-2024-03-19-10-00-53.png\" alt=\"\" width=\"395\" height=\"284\" sizes=\"100vw\" srcset=\"https://rosmianto.com/media/posts/12/responsive/Screenshot-from-2024-03-19-10-00-53-xs.png 300w ,https://rosmianto.com/media/posts/12/responsive/Screenshot-from-2024-03-19-10-00-53-sm.png 480w ,https://rosmianto.com/media/posts/12/responsive/Screenshot-from-2024-03-19-10-00-53-md.png 768w ,https://rosmianto.com/media/posts/12/responsive/Screenshot-from-2024-03-19-10-00-53-lg.png 1024w ,https://rosmianto.com/media/posts/12/responsive/Screenshot-from-2024-03-19-10-00-53-xl.png 1360w ,https://rosmianto.com/media/posts/12/responsive/Screenshot-from-2024-03-19-10-00-53-2xl.png 1600w\"></figure>\n<figcaption >Nothing weird</figcaption>\n</figure>\n<p>Upon further inspection, I noticed that the bug appeared when I added a new FreeRTOS task. The problem was I didn't properly terminate the task using vTaskDelete().</p>\n<p>Cannot show the code because it's super secret. I later added the vTaskDelete(NULL) and the problem is just gone.</p>\n<p>Happy day! Sometimes life forces you to apply what you preach. üòÄ</p>",
            "image": "https://rosmianto.com/media/posts/12/git-history-white.png",
            "author": {
                "name": "Rosmianto A. Saputro"
            },
            "tags": [
                   "Embedded Tips"
            ],
            "date_published": "2024-03-18T10:08:19+07:00",
            "date_modified": "2024-03-22T06:05:08+07:00"
        },
        {
            "id": "https://rosmianto.com/how-to-do-freelancing-as-an-embedded-engineer.html",
            "url": "https://rosmianto.com/how-to-do-freelancing-as-an-embedded-engineer.html",
            "title": "How to Do Freelancing As an Embedded Engineer",
            "summary": "Freelance is a wonderful world: It offers lots of freedom and flexibility. But, given those pluses, freelance is also hard. Because instead of just doing the tasks from your boss, now you have to find clients. Sometimes it's easy, but often it's challenging to get&hellip;",
            "content_html": "<p>Freelance is a wonderful world:</p>\n<ul>\n<li>You get to choose who you work with.</li>\n<li>You get to choose what project you work on.</li>\n<li>You get to choose how much you are getting paid.</li>\n</ul>\n<p>It offers lots of freedom and flexibility.</p>\n<p>But, given those pluses, freelance is also hard. Because instead of just doing the tasks from your boss, now you have to find clients. Sometimes it's easy, but often it's challenging to get clients.</p>\n<p>But again, the pluses far outweigh the minuses. No wonder freelancing is so seductive for many talented engineers. It's too sexy to ignore. You should not quit your main job if you have zero knowledge of the freelance world.</p>\n<p>That's too risky. Instead, do freelance on the side, and slowly transition from full-time employee to full-time freelancer (if you want to. I have friends who prefer part-time freelance indefinitely).</p>\n<p>Now, to be a freelance embedded engineer, you need to assess your profile first.</p>\n<p>I will be using my 3-check criteria to check your readiness:</p>\n<ol>\n<li>2 years of experience minimum</li>\n<li>10+ hours a week to spare</li>\n<li>Self-disciplined and autonomous</li>\n</ol>\n<p>Let's dissect them one by one.</p>\n<h3>1. Two Years of Experience Minimum</h3>\n<p>2 years minimum is a subjective criterion, actually. But it helps me to see if someone has enough exposure to the corporate world.</p>\n<p>Less than 2 years usually an engineer still doesn't know the full cycle of embedded project development. They never shipped a product, never tested device on the field, never knew how to handle business pressure to technical development.</p>\n<p>If you have less than 2, you still can be a freelancer, but I'm afraid you will not survive and leave negative views of freelance world.</p>\n<p>Remember, embedded freelancing is different with other types of freelance like video editing, translation, voice over. There are specific knowledge and skills required to survive it.</p>\n<h3>2. 10+ Hours/week To Spare</h3>\n<p>Now, accepting freelance projects means you work outside your main job. And the great part of freelance is, you have the freedom to set your schedule. You just need to make sure your clients are kept updated every week.</p>\n<p>In my experience, 10 hours a week at minimum is a sweet spot to make a significant project progress. Less than that usually you can only do minor work. And most clients also have time constraints.</p>\n<p>Because I say 10 hours a week, that means you can work 2 hours on Monday, 2 hours on Tuesday, and 6 hours on Saturday. Or..</p>\n<p>5 hours on Saturday, 5 hours on Sunday. You get the idea. You pick yourself.</p>\n<p>Make sure you send the progress update to your clients every week.</p>\n<h3>3. Self-Discipline and Autonomous</h3>\n<p>Lastly, you have to have those 2 traits: self-disciplined and autonomous.</p>\n<p>If you need to constantly be told what to do, what next, how to do it. Ahh, forget freelancing. It won't suit your style.</p>\n<p>Because in reality, freelancing requires lots of discipline, because your clients don't know what you should do. That's why they hired you as a freelancer.</p>\n<p>They don't have the bandwidth to check your work every hour.</p>\n<p>They only have the money to pay for your work.</p>\n<p>In my experience, someone who has these traits is usually a senior engineer.</p>\n<h2>How to Land Freelance Clients</h2>\n<p>Now, if you pass those 3-check criteria, you are ready to get clients. My method below is for long-term¬†</p>\n<p>Follow my 3-step framework to get clients:</p>\n<p>üëâ Set your expertise. What projects do you want to do? Robotics? IoT? Firmware Development?</p>\n<p>üëâ ‚ÄúAttract‚Äù not ‚Äúhunt‚Äù clients. Do that by showing your expertise through posts on LinkedIn.</p>\n<p>üëâ This is the hardest step, it might test how serious you are. Publish daily for the next 30 days.<br><br>Do that and you will have someone DM you end of the month.</p>",
            "image": "https://rosmianto.com/media/posts/9/axel-richter-Ky0B3cBJGKo-unsplash.jpg",
            "author": {
                "name": "Rosmianto A. Saputro"
            },
            "tags": [
                   "Embedded Freelancing"
            ],
            "date_published": "2024-03-10T10:20:27+07:00",
            "date_modified": "2024-03-21T06:25:50+07:00"
        },
        {
            "id": "https://rosmianto.com/yes-you-can-use-arduino-for-commercial-grade-only-if-you-do-this.html",
            "url": "https://rosmianto.com/yes-you-can-use-arduino-for-commercial-grade-only-if-you-do-this.html",
            "title": "Yes, You Can Use Arduino for Commercial-grade, Only If You Do This",
            "summary": "I need to reimphasize this: Yes, Arduino is a toy. And by a toy, I mean Scratch-the-programming-language toy. Arduino is the Scratch of embedded world. But can you use Arduino for industrial or commercial-grade projects? The answer is also YES. Before we continue, I need&hellip;",
            "content_html": "<p>I need to reimphasize this:</p>\n<p><em>Yes, Arduino is <strong>a toy</strong>. And by a toy, I mean Scratch-the-programming-language toy. Arduino is the Scratch of embedded world.</em></p>\n<p>But can you use Arduino for industrial or commercial-grade projects?</p>\n<p>The answer is also YES.</p>\n<p>Before we continue, I need to make sure that Arduino can refer to many things:</p>\n<ul>\n<li>Arduino Boards (UNO, Nano, Micro, etc.)</li>\n<li>Arduino IDE (The program you use to type code and upload code)</li>\n<li>Arduino Framework (The entire embedded software libraries so you can use <code>Serial.begin()</code>, <code>millis()</code>, <code>delay()</code>, etc.)</li>\n<li>Arduino Community (forum.arduino.cc)</li>\n</ul>\n<p>In this article, we're going to refer Arduino as the Boards and Framework.</p>\n<h2>Why Did People Think Arduino is a Toy?</h2>\n<p>Because like any other toys, Arduino does:</p>\n<ul>\n<li>Simplify a lot of things</li>\n<li>Is cheap enough</li>\n<li>Is easy enough to get started with</li>\n</ul>\n<p>Arduino literally has lowered the barrier to entry embedded world. Before this, you have to use complicated boards (do you know BASIC Stamp?) with¬†<em>weird¬†</em>setup and boring documentation.</p>\n<p>From there, Arduino has been associated with fun and cool projects, sometimes even a literal kid was teaching us to explore Arduino (remember Super-Awesome Sylvia?), no wonder if people start thinking Arduino == Toy.</p>\n<p>And you must understand, that ironically, Arduino isn't aimed for embedded engineers.</p>\n<h2>Arduino Is Aimed for This Market Segment</h2>\n<p>Arduino is designed to be used by hobbyists and artists. People with no embedded background. So those people can make interactive art projects without much knowing technical stuff.</p>\n<p>Yes, I know that Arduino is now expanding their business and try to capture industrial IoT (with Arduino PRO series). But for the majority of their market, it's still hobbyists.</p>\n<p>Fortunately, Arduino as a board is just another embedded board, just like STM32 Development Board. Which is perfect for embedded engineers to use for many applications, including industrial/commercial projects.</p>\n<h2>You Can Use Arduino If You Only Do This</h2>\n<p>By treating Arduino just like other embedded tools.</p>\n<p>What does that mean? Arduino, in its core, is just an microcontroller chip with some external components. So you can use it safely by:</p>\n<ol>\n<li>Enforcing high-standard embedded environments</li>\n<li>Insanely good coding standard</li>\n<li>Superb firmware architecture design (this one is very important)</li>\n<li>Understanding the hardware limitation</li>\n<li>Thorough testing and certification process</li>\n</ol>\n<p>In fact, Arduino UNO contains ATMega328P. That microcontroller is actually a commercial-ready chip. So don't worry. Atmel (now Microchip) even provides automotive-grade chip of ATMega328P. Do you still think it's a¬†<strong>toy</strong>?</p>\n<figure ><figure class=\"post__image post__image--center\"><img loading=\"lazy\"  src=\"https://rosmianto.com/media/posts/5/Screenshot-2024-02-11-at-12.47.28.png\" alt=\"ATMega328P is available with the automotive-grade variant\" width=\"1828\" height=\"520\" sizes=\"100vw\" srcset=\"https://rosmianto.com/media/posts/5/responsive/Screenshot-2024-02-11-at-12.47.28-xs.png 300w ,https://rosmianto.com/media/posts/5/responsive/Screenshot-2024-02-11-at-12.47.28-sm.png 480w ,https://rosmianto.com/media/posts/5/responsive/Screenshot-2024-02-11-at-12.47.28-md.png 768w ,https://rosmianto.com/media/posts/5/responsive/Screenshot-2024-02-11-at-12.47.28-lg.png 1024w ,https://rosmianto.com/media/posts/5/responsive/Screenshot-2024-02-11-at-12.47.28-xl.png 1360w ,https://rosmianto.com/media/posts/5/responsive/Screenshot-2024-02-11-at-12.47.28-2xl.png 1600w\"></figure>\n<figcaption >You can get automotive-grade variant of ATMega328P</figcaption>\n</figure>\n<h2>Okay, What About Arduino Framework? It's Sub-Standard.</h2>\n<p>Yes Arduino Framework simplifies lots of things. But saying it as sub-standard software is an insult.</p>\n<p>Treat Arduino Framework like CMSIS or mbed framework. Problem's solved.</p>\n<p>In fact, Arduino and countless libraries have been used, tested, reported, and fixed by hundreds or thousands engineers around the world. Ditching Arduino Framework to favor your own in-house solution is like ditching AES-128 algorithm to make your own cryptographic algorithm. It's a bad idea.</p>\n<p>Now, to make Arduino framework more polished, do these:</p>\n<ol>\n<li>Ditch Arduino IDE and switch to VSCode + PlatformIO</li>\n<li>Start separating your code into logical module. We call this modular programming</li>\n<li>Use useful C and C++ features (like classes, virtual function, polymorphism, or even std::function if you feel fancy today)</li>\n<li>Write proper unit-tests and do proper testing process</li>\n<li>Use static analyzer and advanced linter</li>\n<li>Lastly, you have to learn how a professional, industrial, commercial-grade firmware are being done.</li>\n</ol>\n<p>That's all you need to do to use Arduino for serious applications.</p>\n<p>For the Point 6, if you are interested developing a better firmware, I made a paid guide where I show you the exact workflow I use to build firmware for my company and my freelance clients. Check it out here: <a href=\"https://fwguide.rosmianto.com?utm_source=rosmianto.com&amp;utm_medium=post\" target=\"_blank\" rel=\"noopener noreferrer\">fwguide.rosmianto.com</a></p>\n<p>¬†</p>\n<p>¬†</p>",
            "author": {
                "name": "Rosmianto A. Saputro"
            },
            "tags": [
                   "Embedded Productivity"
            ],
            "date_published": "2024-02-11T07:25:03+07:00",
            "date_modified": "2024-02-12T09:59:24+07:00"
        },
        {
            "id": "https://rosmianto.com/the-reality-of-learning-embedded.html",
            "url": "https://rosmianto.com/the-reality-of-learning-embedded.html",
            "title": "The Reality of Learning Embedded",
            "summary": "There's a big gap in embedded world. I observed that your experience in embedded is either: Group #1, enjoying their craft with Arduino, but not realizing that there are a whole world beyond Arduino. Group #2, too busy even to guide #1. They are in&hellip;",
            "content_html": "<p>There's a big gap in embedded world.</p>\n<p>I observed that your experience in embedded is either:</p>\n<ol>\n<li>Beginner. Familiar with Arduino. Nothing more.</li>\n<li>Veteran. You are battle-tested, lots of technical scars embedded (nice pun!) in your face.</li>\n</ol>\n<p>Group #1, enjoying their craft with Arduino, but not realizing that there are a whole world beyond Arduino.</p>\n<p>Group #2, too busy even to guide #1. They are in high demand, and they seemed to be always working on something.</p>\n<p>If I draw those two groups, maybe it looked like this:</p>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://rosmianto.com/media/posts/3/Untitled.png\" alt=\"\" width=\"3494\" height=\"1000\" sizes=\"100vw\" srcset=\"https://rosmianto.com/media/posts/3/responsive/Untitled-xs.png 300w ,https://rosmianto.com/media/posts/3/responsive/Untitled-sm.png 480w ,https://rosmianto.com/media/posts/3/responsive/Untitled-md.png 768w ,https://rosmianto.com/media/posts/3/responsive/Untitled-lg.png 1024w ,https://rosmianto.com/media/posts/3/responsive/Untitled-xl.png 1360w ,https://rosmianto.com/media/posts/3/responsive/Untitled-2xl.png 1600w\"></figure>\n<p>They live in a different island. They have different activity and rules.</p>\n<p>Me myself, just stranded to the veteran island, so I know how it feels to live in both islands.</p>\n<p>The problem is, I got there by swimming, forcing myself to move the hard way. But something I know for sure is swimming isn't for everybody.</p>\n<p>Being a noob is both easy and difficult:</p>\n<ul>\n<li>Easy because you have lots of tutorials for beginner</li>\n<li>Difficult because you have lots of tutorials for beginner</li>\n</ul>\n<p>You see the irony? Tutorials have been a blessing and a curse.</p>\n<h2>The Issue With Tutorials</h2>\n<p>I'm pretty sure you have followed a tutorial at some point in your embedded career. What you usually find?</p>\n<p>Prepare the breadboard üëâ follow the wiring connection üëâ copy the example code üëâ build and flash. Voila!</p>\n<p>Yes, there's some explanations (like Adafruit and Sparkfun tutorials, they're great!), but the nature of tutorial is to <em>guide you do something really specific </em>(like blinking LEDs or reading sensor), nothing more.</p>\n<p>Problem arise when you want to level up your game. You might search for more advanced tutorials, like \"how to use FreeRTOS\", and fortunately you can get that tutorial.</p>\n<p>You then search for even more advanced topic like \"how to set correct FreeRTOS priority values\", no tutorials.</p>\n<p>You search \"how to make performant multiple FreeRTOS tasks\", you ended up with multiple sources, a bit here, a bit there. There's no single tutorials that explains all.</p>\n<p>Yes, that's the reality when you leave that noob island.</p>\n<p>You need to understand multiple concepts at once to understand FreeRTOS priority values.</p>\n<p>You need to understand multiple concepts at once to make performant FreeRTOS tasks.</p>\n<p>It's like Googling \"how to build website like Facebook\" and gets frustrated.</p>\n<p>Building Facebook isn't a tutorial bruh.</p>\n<h2>Noob Island Inhabitants</h2>\n<p>They don't have tutorials for advanced topics so they do what they can. They make sub-par work, even though they use many advanced concepts. I've seen it with my own eye!</p>\n<p>For example, I've seen a junior engineer wanted to run multiple tasks in parallel using ESP32. Instead of using the good ol' FreeRTOS tasks, he used some random library on the internet, acting as a scheduler, and throw code into the scheduler.</p>\n<p>Well, to be fair, the code is working btw.</p>\n<p>BUT IT STUTTERS, LIKE A LOT!</p>\n<p>He wasn't aware that ESP32 has multiple core, and he wasn't even aware the framework provides xTaskCreate() to make tasks.</p>\n<h2>I Want to Help</h2>\n<p>There are definitely issues there, and instead of swimming by themselves to veteran island. I want to build a small ship to help noob island inhabitants cross the sea, and land safely at the veteran island.</p>\n<p>I know, it's just a small dream, but I believe noob island inhabitants also deserve a better experience, better network, better friends, that they can find in veteran island. I believe I have to build a transportation mode, a ship if you want to call it, to help people cross the sea.</p>\n<h2>My Small Ship</h2>\n<p>Here's my little ship (looks like a boat, for now):</p>\n<figure class=\"post__image post__image--center\"><img loading=\"lazy\"  src=\"https://rosmianto.com/media/posts/3/ship.png\" alt=\"\" width=\"501\" height=\"220\" sizes=\"100vw\" srcset=\"https://rosmianto.com/media/posts/3/responsive/ship-xs.png 300w ,https://rosmianto.com/media/posts/3/responsive/ship-sm.png 480w ,https://rosmianto.com/media/posts/3/responsive/ship-md.png 768w ,https://rosmianto.com/media/posts/3/responsive/ship-lg.png 1024w ,https://rosmianto.com/media/posts/3/responsive/ship-xl.png 1360w ,https://rosmianto.com/media/posts/3/responsive/ship-2xl.png 1600w\"></figure>\n<p>Yeah okay, it's a boat, but eventually I want to grow this little boat into a little ship, then a little yacht, and (hopefully) into a cruise ship. Here's what I will do with the ship:</p>\n<p>For Noob Island to Veteran Island, I will help you cross the sea with my ship. Probably you will look like this:</p>\n<figure class=\"post__image post__image--center\"><img loading=\"lazy\"  src=\"https://rosmianto.com/media/posts/3/noob-vet.png\" alt=\"\" width=\"2852\" height=\"1000\" sizes=\"100vw\" srcset=\"https://rosmianto.com/media/posts/3/responsive/noob-vet-xs.png 300w ,https://rosmianto.com/media/posts/3/responsive/noob-vet-sm.png 480w ,https://rosmianto.com/media/posts/3/responsive/noob-vet-md.png 768w ,https://rosmianto.com/media/posts/3/responsive/noob-vet-lg.png 1024w ,https://rosmianto.com/media/posts/3/responsive/noob-vet-xl.png 1360w ,https://rosmianto.com/media/posts/3/responsive/noob-vet-2xl.png 1600w\"></figure>\n<p>And for Veteran Island to Noob Island, I will bring resources from Veteran Island, such as their Best Practices, their tools, their network, etc.</p>\n<p>Basically I am a ship captain crossing sea back and forth.</p>\n<p>For now, my little ship is a digital product you can buy right now. It's called Professional Firmware Development Guide, where I show you the workflow I used to build professional-grade firmware for my company and clients.</p>\n<p>If you are interested, you can check it out here: <a href=\"https://fwguide.rosmianto.com\" target=\"_blank\" rel=\"noopener noreferrer\">fwguide.rosmianto.com</a></p>\n<p>Your ship captain is signing out. See you later! ‚õµ</p>",
            "author": {
                "name": "Rosmianto A. Saputro"
            },
            "tags": [
            ],
            "date_published": "2024-02-10T07:11:31+07:00",
            "date_modified": "2024-03-18T21:57:36+07:00"
        },
        {
            "id": "https://rosmianto.com/the-friday-firmware-newsletter.html",
            "url": "https://rosmianto.com/the-friday-firmware-newsletter.html",
            "title": "The Friday Firmware Newsletter",
            "summary": "Every Friday, I share embedded tips and tricks, embedded career advice, and embedded perspectives. Join other 2200+ fellow engineers today by entering your email address below. Subscribe to get my latest content by email. Subscribe We won't send you spam. Unsubscribe at any time. Built&hellip;",
            "content_html": "<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://rosmianto.com/media/posts/2/Untitled.png\" alt=\"\" width=\"3494\" height=\"1000\" sizes=\"100vw\" srcset=\"https://rosmianto.com/media/posts/2/responsive/Untitled-xs.png 300w ,https://rosmianto.com/media/posts/2/responsive/Untitled-sm.png 480w ,https://rosmianto.com/media/posts/2/responsive/Untitled-md.png 768w ,https://rosmianto.com/media/posts/2/responsive/Untitled-lg.png 1024w ,https://rosmianto.com/media/posts/2/responsive/Untitled-xl.png 1360w ,https://rosmianto.com/media/posts/2/responsive/Untitled-2xl.png 1600w\"></figure>\n<p>Every Friday, I share embedded tips and tricks, embedded career advice, and embedded perspectives. Join other 2200+ fellow engineers today by entering your email address below.</p>\n<p>\n<script src=\"https://f.convertkit.com/ckjs/ck.5.js\"></script>\n</p>\n<form class=\"seva-form formkit-form\" style=\"background-color: #f9fafb; border-radius: 4px;\" action=\"https://app.convertkit.com/forms/6182417/subscriptions\" method=\"post\" data-sv-form=\"6182417\" data-uid=\"2d99eac9a7\" data-format=\"inline\" data-version=\"5\" data-options=\"{&quot;settings&quot;:{&quot;after_subscribe&quot;:{&quot;action&quot;:&quot;message&quot;,&quot;success_message&quot;:&quot;Success! Now check your email to confirm your subscription.&quot;,&quot;redirect_url&quot;:&quot;&quot;},&quot;analytics&quot;:{&quot;google&quot;:null,&quot;fathom&quot;:null,&quot;facebook&quot;:null,&quot;segment&quot;:null,&quot;pinterest&quot;:null,&quot;sparkloop&quot;:null,&quot;googletagmanager&quot;:null},&quot;modal&quot;:{&quot;trigger&quot;:&quot;timer&quot;,&quot;scroll_percentage&quot;:null,&quot;timer&quot;:5,&quot;devices&quot;:&quot;all&quot;,&quot;show_once_every&quot;:15},&quot;powered_by&quot;:{&quot;show&quot;:true,&quot;url&quot;:&quot;https://convertkit.com/features/forms?utm_campaign=poweredby&amp;utm_content=form&amp;utm_medium=referral&amp;utm_source=dynamic&quot;},&quot;recaptcha&quot;:{&quot;enabled&quot;:false},&quot;return_visitor&quot;:{&quot;action&quot;:&quot;show&quot;,&quot;custom_content&quot;:&quot;&quot;},&quot;slide_in&quot;:{&quot;display_in&quot;:&quot;bottom_right&quot;,&quot;trigger&quot;:&quot;timer&quot;,&quot;scroll_percentage&quot;:null,&quot;timer&quot;:5,&quot;devices&quot;:&quot;all&quot;,&quot;show_once_every&quot;:15},&quot;sticky_bar&quot;:{&quot;display_in&quot;:&quot;top&quot;,&quot;trigger&quot;:&quot;timer&quot;,&quot;scroll_percentage&quot;:null,&quot;timer&quot;:5,&quot;devices&quot;:&quot;all&quot;,&quot;show_once_every&quot;:15}},&quot;version&quot;:&quot;5&quot;}\">\n<div class=\"formkit-background\" style=\"opacity: 0.2;\">¬†</div>\n<div data-style=\"minimal\">\n<div class=\"formkit-header\" style=\"color: #4d4d4d; font-size: 27px; font-weight: bold;\" data-element=\"header\">\n<h2>Get Embedded Tips Every Friday</h2>\n</div>\n<div class=\"formkit-subheader\" style=\"color: #686868; font-size: 18px;\" data-element=\"subheader\">\n<p>Subscribe to get my latest content by email.</p>\n</div>\n<div class=\"seva-fields formkit-fields\" data-element=\"fields\" data-stacked=\"false\">\n<div class=\"formkit-field\"><input class=\"formkit-input\" style=\"color: #000000; border-color: #e3e3e3; border-radius: 4px; font-weight: 400;\" name=\"email_address\" required=\"\" type=\"email\" placeholder=\"Email Address\" aria-label=\"Email Address\"></div>\n<div class=\"formkit-spinner\">\n<div>¬†</div>\n<div>¬†</div>\n<div>¬†</div>\n</div>\n<button class=\"formkit-submit formkit-submit\" style=\"color: #ffffff; background-color: #1677be; border-radius: 4px; font-weight: 400;\" data-element=\"submit\"><span class=\"\">Subscribe</span> </button></div>\n<div class=\"formkit-guarantee\" style=\"color: #4d4d4d; font-size: 13px; font-weight: 400;\" data-element=\"guarantee\">We won't send you spam. Unsubscribe at any time.</div>\n<div class=\"formkit-powered-by-convertkit-container\"><a href=\"https://convertkit.com/features/forms?utm_campaign=poweredby&amp;utm_content=form&amp;utm_medium=referral&amp;utm_source=dynamic\" data-element=\"powered-by\" class=\"formkit-powered-by-convertkit\" data-variant=\"dark\" target=\"_blank\" rel=\"nofollow noopener\">Built with ConvertKit</a></div>\n</div>\n</form>",
            "author": {
                "name": "Rosmianto A. Saputro"
            },
            "tags": [
                   "Newsletter"
            ],
            "date_published": "2024-02-09T14:44:04+07:00",
            "date_modified": "2024-02-10T10:34:14+07:00"
        }
    ]
}
